plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.11'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'kr.or.smhrd'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.0'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

tasks.named("bootBuildImage") {
	def date = new Date()
	def formattedDate = date.format('yyyyMMddHHmmss')
	def sha = System.getenv('CONTAINER_BUILD_SHA') ?: null

	def containerRegistryUrl = System.getenv('CONTAINER_REGISTRY_URL') ?: "ghcr.io"
	def containerImageName = System.getenv('CONTAINER_IMAGE_NAME') ?: "last-summer-project/project-web"
	def containerImageNameFull = "${containerRegistryUrl}/${containerImageName}".toLowerCase()


	imageName = "${containerImageNameFull}:latest"
	publish = System.getenv('CI') == "true"
	tags = [
		"${containerImageNameFull}:${project.version}",
		"${containerImageNameFull}:${formattedDate}"
	]
	if (sha != null)
		tags += "${containerImageNameFull}:${sha}"

	docker {
		publishRegistry {
			username = System.getenv('CONTAINER_REGISTRY_USERNAME') ?: ""
			password = System.getenv('CONTAINER_REGISTRY_PASSWORD') ?: ""
			url = "https://${containerRegistryUrl}"
		}
	}
}

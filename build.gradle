plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.11'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.epages.restdocs-api-spec' version '0.16.4'
}

group = 'com.smhrd'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springCloudVersion', "2021.0.7")
    set('jjwtVersion', "0.11.5")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.0'
    // org.springframework.cloud:spring-cloud-starter-aws
    implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.4'

    // Json Web Token
    implementation "io.jsonwebtoken:jjwt-api:$jjwtVersion"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:$jjwtVersion"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:$jjwtVersion"

    implementation 'com.google.code.gson:gson:2.9.1'
    compileOnly 'org.projectlombok:lombok'
    // https://github.com/spring-attic/spring-cloud-aws/issues/384
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation 'org.springframework.security:spring-security-test'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Documentation
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec:0.16.4'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.16.4'

    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.register('restDocsTest', Test) {
    dependsOn test
    outputs.dir snippetsDir
    useJUnitPlatform {
        includeTags("restDocs")
    }

    finalizedBy "asciidoctor"
    finalizedBy "openapi3"
    finalizedBy "postman"
}

tasks.named('asciidoctor') {
    dependsOn restDocsTest

    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    baseDirFollowsSourceDir()
}

tasks.register("apiBuild", GradleBuild) {
    tasks = ["clean", "restDocsTest", "build"]
}

tasks.named("bootBuildImage") {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    def sha = System.getenv('CONTAINER_BUILD_SHA') ?: null

    def containerRegistryUrl = System.getenv('CONTAINER_REGISTRY_URL') ?: "ghcr.io"
    def containerImageName = System.getenv('CONTAINER_IMAGE_NAME') ?: "last-summer-project/project-web"
    def containerImageNameFull = "${containerRegistryUrl}/${containerImageName}".toLowerCase()


    imageName = "${containerImageNameFull}:latest"
    publish = System.getenv('CI') == "true"
    tags = [
            "${containerImageNameFull}:${project.version}",
            "${containerImageNameFull}:${formattedDate}"
    ]
    if (sha != null)
        tags += "${containerImageNameFull}:${sha}"

    docker {
        publishRegistry {
            username = System.getenv('CONTAINER_REGISTRY_USERNAME') ?: ""
            password = System.getenv('CONTAINER_REGISTRY_PASSWORD') ?: ""
            url = "https://${containerRegistryUrl}"
        }
    }
}

openapi3 {
    server = 'https://lsp.won-jung.kim/api/v1'
    title = 'API'
    description = 'REST API Documentation'
    version = "${project.version}"
    tagDescriptionsPropertiesFile = "src/test/resources/tags.yaml"
    format = 'yaml'
}

postman {
    title = 'API'
    version = "${project.version}"
    baseUrl = 'https://lsp.won-jung.kim'
}